$measure: $font-base * $line-height;

// Modular Scale Values
// http://typecast.com/blog/contrast-through-scale
$tera: 117;		//	117	= 18 × 6.5
$giga: 90;		//	90  = 18 × 5
$mega: 72;		//	72  = 18 × 4
$alpha: 60;		//	60  = 18 × 3.3333
$beta: 48;		//	48  = 18 × 2.6667
$gamma: 36;		//	36  = 18 × 2
$delta: 24;		//	24  = 18 × 1.3333
$epsilon: 21;	//	21  = 18 × 1.1667
$zeta: 18; 		//	18  = 18 × 1

// typscale unit
$type-scale-unit-value: rem;

// typographic scale
@mixin modular-scale($scale, $base, $value, $measure:"") {
	font-size: $scale#{px};
	font-size: modular-scale($scale, $base, $value);
	@if $measure != "" {
		margin-bottom: measure-margin($scale, $measure, $value);
	}
}

// modular scale function to return em equivalent
@function modular-scale($scale, $base, $value) {
	// divide a given font-size by base font-size & return a relative em value
	@return ($scale/$base)#{$value};
}

// divide 1 unit of measure by given font-size & return a relative em value
@function measure-margin($scale, $measure, $value) {
	@return ($measure/$scale)#{$value};
}

// make a multi-dimensional array, where:
// the first value is the name of the class
// and the second value is the variable for the size
$sizes: tera $tera, giga $giga, mega $mega, alpha $alpha, beta $beta, gamma $gamma, delta $delta, epsilon $epsilon, zeta $zeta;

// associate h1-h6 tags with their appropriate greek heading
@each $size in $sizes {
	.#{nth($size, 1)} {
		@include modular-scale(nth($size, 2), $font-base, '#{$type-scale-unit-value}', $measure);
	}
}

